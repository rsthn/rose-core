;; Escapes a value to be used in HTML elements.
(def-fn escape value
    (str:replace "<" "\<" (value))
)

;; Removes empty lines from the beginning and end of the array.
(def-fn cleanup lines

    (when-not (len (lines))
        (ret (lines)))

    (while (eq? (array:first (lines)) "")
        (array:shift (lines)))

    (while (eq? (array:last (lines)) "")
        (array:pop (lines)))

    (lines)
)

;; Returns formatted documentation for doc-strings in a given file.
(def-fn getDocumentation filePath

    (set fileData (file:read (filePath)))

    (set title (re:match "/@title \(?P<value>.+\)/" (fileData)))
    (when-not (title.value)
        (ret null))

    (set short (re:match "/@short \(?P<value>.+\)/" (fileData)))
    (set short (? (short.value) (short.value) (title.value)))

    (set desc (re:match "/@desc \(?P<value>.+\)/" (fileData)))

    (set doc "[&laquo; Go Back]\(./README.md\)\n")
    (append doc "# (title.value)\n")

    (when (desc)
        (append doc "(desc.value)\n")
    )

    (for match (filter match (re:match-all "/\/\*\*.+?\*\//s" (fileData)) (in? (match) "@code"))

        ;; Remove first and last lines.
        (set lines (array:slice 1 -1 (split "\n" (match))))

        (set meta (& 
            "code" (#)
            "example" (#)
            "text" (#)
        ))

        (set target (meta.text))

        ;; Grab special annotations and clean up each line.
        (for line (lines)
            (set value (substr 3 (line)))

            (when (starts-with? "@code" (value))
                (set target (meta.code))
                (array:push (target) (substr 6 (value)))
                (continue)
            )

            (when (starts-with? "@example" (value))
                (set target (meta.example))
                (array:push (target) (substr 9 (value)))
                (continue)
            )

            (array:push (target) (value))
        )

        (set meta.text (cleanup (meta.text)))
        (set meta.example (cleanup (meta.example)))

        ;; Write formatted documentation.
        (set output (concat "\n### " (join "<br/>" (map x (meta.code) (escape (x)))) "\n"))

        (set br "")
        (for line (meta.text)
            (append output "(br)(escape (line))\n")
            (when (ends-with? "." (line))
                (set br "<br/>"))
        )

        (when (len (meta.example))
            (append output "\`\`\`lisp\n")
            (for line (meta.example)
                (append output "(line)\n")
            )
            (append output "\`\`\`\n")
        )

        (append doc (output))
    )

    (# (title.value) (short) (doc))
)

(assert (path:exists "./src")
    "Run this script from the project's root folder."
)

(set names (&))

(for file (dir:files-recursive "./src/" "/\.php$/")
    (set info (getDocumentation (file.path)))
    (when-not (info)
        (continue))

    (echo "âœ” (info.0)")
    (file:write "./docs/(info.1).md" (info.2))

    (map:set (names) (info.1) (info.0))
)

(file:remove "./docs/README.md")
(set output "# Available Functions\n")
(for file (dir:files-recursive "./docs/")
    (set name (array:last (split "-" (path:name (file.name)))))

    (when (in? (names) (name))
        (set name (map:get (names) (name))))

    (append output "- [(name)]\(./(file.name)\)\n")
)
(file:write "./docs/README.md" (output))
